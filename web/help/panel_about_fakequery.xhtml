<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:p="http://primefaces.org/ui"
      xmlns:util="http://xmlns.jcp.org/jsf/composite/util">
    <ui:composition>

        <!-- Author: Darren Kelly (Webel IT Australia). PLEASE DO NOT EDIT.
            
        If you don't want it to appear in the index.xhtml just comment out or remove the ui:include.
        
        -->

        <p:panel 
            header="Help: About fake entities and fake queries (you may not need EJBs or a real database)"
            toggleable="true"
            collapsed="true"
            style="width:50em;"
            >
            <p>                
                Behind the scenes this mini web app currently offers these main Java classes:
                <ul>
                    <li>
                        <code>FakeEntity</code>: a POJO with some basic fields one can get and set.
                        It has a special field <code>detached</code> to mimic JPA detachment.
                    </li>
                    <li>
                        <code>FakeQuery</code>: simulates some classic JPA EntityManager CRUD 
                        interactions with <code>FakeEntity</code> items using a map of fake 
                        entities. It does not actually write to a database,
                        and it is not an actual EJB (or even an injected CDI bean).
                    </li>
                    <li>
                        <code>ViewBean</code>: a CDI-compliant @ViewScoped JSF backing bean.
                        It offers the ability to interact with <code>FakeEntity</code>
                        items "fetched" via <code>FakeQuery</code>, almost like a real EJB query.
                        <ul>
                            <li>
                                Importantly, it performs lazy loading in <code>getEntities()</code>
                                via <code>fetchEntities()</code>, but only on first access or after a <code>reset()</code>.
                                See the example <code>/web/dataTable.xhtml</code> test page.
                            </li>
                            <li>
                                It also offers a <code>setId(Long id)</code> for use with <code>f:viewParam</code> 
                                in the <code>view.xhtml</code> and <code>edit.xhtml</code> pages for 
                                individual <code>FakeEntity</code> items.
                            </li>
                        </ul>                        
                    </li>
                </ul>
            </p>
            <p>
                You are most welcome to <b>copy then adapt</b> <code>FakeEntity</code>, <code>FakeQuery</code>, and 
                <code>ViewBean</code>
                as you require, that is what this template test app is for, but if you do, <span class="nb">please respect
                the re-packaging and re-authoring requirements explained above</span>. You may also just use
                them "as is" if they are enough for your own test case(s).
            </p>

            <p>
                You may of course introduce actual @EJBs. However, keep in mind that actual database 
                interaction makes your test web app far less portable and much harder to share. 
                You may also use CDI bean injection in your tests, but keep in mind 
                your focus should be on testing JSF and PrimeFaces, not underlying Java EE.
            </p>
            <p>
                You will probably be able to prepare most JSF and PrimeFaces tests 
                just using the simple <code>FakeQuery</code> and <code>FakeEntity</code> system 
                offered here (although they can't imitate the full JPA query detach/merge process).
            </p>

            <util:gotit_help/> 

        </p:panel>


    </ui:composition>
</html>

